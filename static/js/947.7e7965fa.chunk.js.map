{"version":3,"file":"static/js/947.7e7965fa.chunk.js","mappings":"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","sources":["components/Cast/Cast.jsx","components/MovieDetails/MovieDetails.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useParams, Link } from 'react-router-dom';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const castResponse = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/credits`, {\n          params: {\n            api_key: '64ac679b39866e67efda72c4a9b2c64c'\n          }\n        });\n        setCast(castResponse.data.cast);\n      } catch (error) {\n        console.error('Error fetching cast:', error);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n return (\n    <div className=\"Cast\">\n      <h2 className=\"centeredContent\">Cast</h2>\n      {cast.length > 0 ? (\n        <ul>\n          {cast.map((actor) => (\n            <li key={actor.id}>\n              <img src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`} alt={actor.name} />\n              <Link to={`/actor/${actor.id}`}>{actor.name}</Link>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>Loading cast...</p>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useParams, Link } from 'react-router-dom';\nimport Cast from 'components/Cast/Cast';\nimport Reviews from 'components/Reviews/Reviews';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [showComponent, setShowComponent] = useState(null);\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const detailsResponse = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}`, {\n          params: {\n            api_key: '64ac679b39866e67efda72c4a9b2c64c'\n          }\n        });\n        setMovieDetails(detailsResponse.data);\n      } catch (error) {\n        console.error('Error fetching movie details:', error);\n      }\n    };\n\n    fetchMovieDetails();\n  }, [movieId]);\n\n  const handleClick = (component) => {\n    setShowComponent(component);\n  };\n\n  return (\n    <div>\n      <h2>Movie Details</h2>\n      {movieDetails ? (\n        <div className=\"movie-details-container\">\n          <img src={`https://image.tmdb.org/t/p/w500${movieDetails.poster_path}`} alt={movieDetails.title} />\n            <div className=\"movie-details\">\n              <h3>{movieDetails.title}</h3>\n              <p>User Score: {movieDetails.vote_average}</p>\n              <p>Overview: {movieDetails.overview}</p>\n              <p>Genres: {movieDetails.genres.map((genre) => genre.name).join(', ')}</p>\n            </div>\n        </div>\n      ) : (\n        <p>Loading movie details...</p>\n      )}\n      <div>\n         <div className=\"centeredContent\">\n        <h2>Additional Information</h2>\n        <ul className=\"infoButton\">\n          <li><Link onClick={() => handleClick('cast')} to=\"#\">Cast</Link></li>\n          <li><Link onClick={() => handleClick('reviews')} to=\"#\">Reviews</Link></li>\n          </ul>\n          </div>\n        {showComponent === 'cast' && <Cast />}\n        {showComponent === 'reviews' && <Reviews />}\n      </div>\n    </div>\n  );\n};\n\nexport default MovieDetails;","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        const reviewsResponse = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews`, {\n          params: {\n            api_key: '64ac679b39866e67efda72c4a9b2c64c'\n          }\n        });\n        setReviews(reviewsResponse.data.results);\n      } catch (error) {\n        console.error('Error fetching reviews:', error);\n      }\n    };\n\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <div>\n      <h2 className=\"centeredContent\">Reviews</h2>\n      {reviews.length > 0 ? (\n        reviews.map((review) => (\n          <div key={review.id}>\n            <p>{review.author}</p>\n            <p>{review.content}</p>\n          </div>\n        ))\n      ) : (\n          <p style={{\n            textAlign: 'center', fontWeight: 'bold', fontSize: '30px'}}>No reviews available</p>\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;"],"names":["movieId","useParams","useState","cast","setCast","useEffect","fetchCast","axios","params","api_key","castResponse","data","console","error","className","length","map","actor","src","profile_path","alt","name","to","id","movieDetails","setMovieDetails","showComponent","setShowComponent","fetchMovieDetails","detailsResponse","handleClick","component","poster_path","title","vote_average","overview","genres","genre","join","onClick","reviews","setReviews","fetchReviews","reviewsResponse","results","review","author","content","style","textAlign","fontWeight","fontSize"],"sourceRoot":""}